package com.smokingcessation.platform.service;

import com.smokingcessation.platform.entity.Notification;
import com.smokingcessation.platform.entity.User;
import com.smokingcessation.platform.entity.Achievement;
import com.smokingcessation.platform.repository.NotificationRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Arrays;

@Service
@RequiredArgsConstructor
@Transactional
public class NotificationService {

    private final NotificationRepository notificationRepository;

    // C√°c th√¥ng ƒëi·ªáp ƒë·ªông vi√™n m·∫´u
    private final List<String> motivationMessages = Arrays.asList(
        "H√¥m nay l√† m·ªôt ng√†y tuy·ªát v·ªùi ƒë·ªÉ ti·∫øp t·ª•c h√†nh tr√¨nh cai thu·ªëc!",
        "M·ªói ng√†y kh√¥ng h√∫t thu·ªëc l√† m·ªôt chi·∫øn th·∫Øng!",
        "S·ª©c kh·ªèe c·ªßa b·∫°n ƒëang c·∫£i thi·ªán t·ª´ng ng√†y!",
        "B·∫°n m·∫°nh m·∫Ω h∆°n c∆°n th√®m thu·ªëc!",
        "H√£y nghƒ© v·ªÅ nh·ªØng ng∆∞·ªùi b·∫°n y√™u th∆∞∆°ng!"
    );

    private final List<String> reminderMessages = Arrays.asList(
        "Nh·ªõ l·∫°i l√Ω do b·∫°n quy·∫øt ƒë·ªãnh cai thu·ªëc nh√©!",
        "Gia ƒë√¨nh b·∫°n t·ª± h√†o v·ªÅ quy·∫øt ƒë·ªãnh n√†y!",
        "Ti·ªÅn ti·∫øt ki·ªám ƒë∆∞·ª£c c√≥ th·ªÉ d√πng cho nh·ªØng ƒëi·ªÅu √Ω nghƒ©a h∆°n!",
        "S·ª©c kh·ªèe l√† t√†i s·∫£n qu√Ω gi√° nh·∫•t!"
    );

    public List<Notification> getUserNotifications(Long userId) {
        return notificationRepository.findByUserIdOrderByCreatedAtDesc(userId);
    }

    public List<Notification> getUnreadNotifications(Long userId) {
        return notificationRepository.findByUserIdAndIsReadFalse(userId);
    }

    public Long getUnreadCount(Long userId) {
        return notificationRepository.countUnreadByUserId(userId);
    }

    public void markAsRead(Long notificationId) {
        Notification notification = notificationRepository.findById(notificationId)
            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y th√¥ng b√°o"));
        notification.setIsRead(true);
        notificationRepository.save(notification);
    }

    public void markAllAsRead(Long userId) {
        List<Notification> unreadNotifications = notificationRepository.findByUserIdAndIsReadFalse(userId);
        unreadNotifications.forEach(notification -> notification.setIsRead(true));
        notificationRepository.saveAll(unreadNotifications);
    }

    // G·ª≠i th√¥ng b√°o huy hi·ªáu
    public void sendAchievementNotification(Long userId, Achievement achievement) {
        User user = new User();
        user.setId(userId);

        Notification notification = new Notification();
        notification.setUser(user);
        notification.setTitle("üèÜ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c huy hi·ªáu m·ªõi!");
        notification.setMessage("B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c huy hi·ªáu: " + achievement.getName() +
                               ". " + achievement.getDescription());
        notification.setType(Notification.NotificationType.ACHIEVEMENT);
        notification.setFrequency(Notification.NotificationFrequency.ONCE);
        notification.setSentAt(LocalDateTime.now());

        notificationRepository.save(notification);
    }

    // T·∫°o th√¥ng b√°o ƒë·ªông vi√™n h√†ng ng√†y
    public void createDailyMotivation(Long userId) {
        User user = new User();
        user.setId(userId);

        String randomMessage = motivationMessages.get(
            (int) (Math.random() * motivationMessages.size()));

        Notification notification = new Notification();
        notification.setUser(user);
        notification.setTitle("üí™ ƒê·ªông vi√™n h√†ng ng√†y");
        notification.setMessage(randomMessage);
        notification.setType(Notification.NotificationType.MOTIVATION);
        notification.setFrequency(Notification.NotificationFrequency.DAILY);
        notification.setScheduledTime(LocalDateTime.now().plusHours(1));

        notificationRepository.save(notification);
    }

    // T·∫°o th√¥ng b√°o nh·∫Øc nh·ªü l√Ω do cai thu·ªëc
    public void createQuitReasonReminder(Long userId, String quitReason) {
        User user = new User();
        user.setId(userId);

        String randomReminder = reminderMessages.get(
            (int) (Math.random() * reminderMessages.size()));

        Notification notification = new Notification();
        notification.setUser(user);
        notification.setTitle("üéØ Nh·∫Øc nh·ªü l√Ω do cai thu·ªëc");
        notification.setMessage(randomReminder + " L√Ω do c·ªßa b·∫°n: " + quitReason);
        notification.setType(Notification.NotificationType.REMINDER);
        notification.setFrequency(Notification.NotificationFrequency.WEEKLY);
        notification.setScheduledTime(LocalDateTime.now().plusDays(1));

        notificationRepository.save(notification);
    }

    // G·ª≠i th√¥ng b√°o c·ªôt m·ªëc quan tr·ªçng
    public void sendMilestoneNotification(Long userId, String milestone, String description) {
        User user = new User();
        user.setId(userId);

        Notification notification = new Notification();
        notification.setUser(user);
        notification.setTitle("üéâ C·ªôt m·ªëc quan tr·ªçng!");
        notification.setMessage(milestone + " - " + description);
        notification.setType(Notification.NotificationType.MILESTONE);
        notification.setFrequency(Notification.NotificationFrequency.ONCE);
        notification.setSentAt(LocalDateTime.now());

        notificationRepository.save(notification);
    }

    // G·ª≠i tin nh·∫Øn t·ª´ coach
    public void sendCoachMessage(Long userId, String message, String coachName) {
        User user = new User();
        user.setId(userId);

        Notification notification = new Notification();
        notification.setUser(user);
        notification.setTitle("üí¨ Tin nh·∫Øn t·ª´ Coach " + coachName);
        notification.setMessage(message);
        notification.setType(Notification.NotificationType.COACH_MESSAGE);
        notification.setFrequency(Notification.NotificationFrequency.ONCE);
        notification.setSentAt(LocalDateTime.now());

        notificationRepository.save(notification);
    }

    // L√™n l·ªãch th√¥ng b√°o ƒë·ªãnh k·ª≥
    public void schedulePeriodicNotifications(Long userId, Notification.NotificationFrequency frequency) {
        User user = new User();
        user.setId(userId);

        LocalDateTime scheduledTime = calculateNextScheduledTime(frequency);

        Notification notification = new Notification();
        notification.setUser(user);
        notification.setTitle("üîî Th√¥ng b√°o ƒë·ªãnh k·ª≥");
        notification.setMessage("ƒê√¢y l√† th√¥ng b√°o ƒë·ªãnh k·ª≥ ƒë·ªÉ nh·∫Øc nh·ªü b·∫°n v·ªÅ h√†nh tr√¨nh cai thu·ªëc!");
        notification.setType(Notification.NotificationType.REMINDER);
        notification.setFrequency(frequency);
        notification.setScheduledTime(scheduledTime);

        notificationRepository.save(notification);
    }

    private LocalDateTime calculateNextScheduledTime(Notification.NotificationFrequency frequency) {
        LocalDateTime now = LocalDateTime.now();
        switch (frequency) {
            case DAILY:
                return now.plusDays(1);
            case WEEKLY:
                return now.plusWeeks(1);
            case MONTHLY:
                return now.plusMonths(1);
            default:
                return now.plusHours(1);
        }
    }

    // X·ª≠ l√Ω g·ª≠i th√¥ng b√°o ƒë√£ l√™n l·ªãch
    public void processPendingNotifications() {
        List<Notification> pendingNotifications = notificationRepository
            .findPendingNotifications(LocalDateTime.now());

        for (Notification notification : pendingNotifications) {
            // G·ª≠i th√¥ng b√°o (c√≥ th·ªÉ t√≠ch h·ª£p v·ªõi email, SMS, push notification)
            notification.setSentAt(LocalDateTime.now());
            notificationRepository.save(notification);

            // T·∫°o l·∫°i th√¥ng b√°o ƒë·ªãnh k·ª≥ n·∫øu c·∫ßn
            if (notification.getFrequency() != Notification.NotificationFrequency.ONCE) {
                scheduleNextNotification(notification);
            }
        }
    }

    private void scheduleNextNotification(Notification originalNotification) {
        Notification nextNotification = new Notification();
        nextNotification.setUser(originalNotification.getUser());
        nextNotification.setTitle(originalNotification.getTitle());
        nextNotification.setMessage(originalNotification.getMessage());
        nextNotification.setType(originalNotification.getType());
        nextNotification.setFrequency(originalNotification.getFrequency());
        nextNotification.setScheduledTime(calculateNextScheduledTime(originalNotification.getFrequency()));

        notificationRepository.save(nextNotification);
    }
}
